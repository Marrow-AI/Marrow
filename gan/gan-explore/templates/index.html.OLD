<!doctype html>
<html>
    <head>
		<title> Marrow | GAN | Latent space explorer </title>
    </head>
    <body>
        <div id="output-container">
            <img id="output" width="512" height="512"></img>
        </div>
        <div id="controls-container">
            <button class="generate" data-direction="back" data-steps="1">&lt;</button>
            <button class="generate" data-direction="forward" data-steps="1">&gt;</button>
            <button class="generate" data-direction="back" data-steps="10">&lt;10</button>
            <button class="generate" data-direction="forward" data-steps="10">10&gt;</button>
            <button class="generate" data-direction="back" data-steps="100">&lt;100</button>
            <button class="generate" data-direction="forward" data-steps="100">100&gt;</button>
            <input id="shadows" type="checkbox">Shadows</input>
            <button id="download-video">Download video</button>


            <form id="shuffle">
                <label>Number of steps:</label>
                <input autocomplete="off" name="steps" value="100" min="1" type="number">
                <label>Snapshot:</label>
                <select name="snapshot">
                </select>
                <select name="type" autocomplete="off">
                    <option value="both" selected="selected">Shuffle both source and destination</option>
                    <option value="keep_source" >Keep source and shuffle destination</option>
                    <option value="use_dest">Use destination as the next source</option>
                </select>
                <button type="submit">Generate animation</button>
      
                <svg id="loading" class="lds-gears" style="display:none" width="48px" height="48px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 100 100" preserveAspectRatio="xMidYMid" style="background: rgba(0, 0, 0, 0) none repeat scroll 0% 0%;"><g transform="translate(50 50)"> <g transform="translate(-19 -19) scale(0.6)"> <g>
				<animateTransform attributeName="transform" type="rotate" values="0;360" keyTimes="0;1" dur="1s" begin="0s" repeatCount="indefinite"/><path d="M37.3496987939662 -7 L47.3496987939662 -7 L47.3496987939662 7 L37.3496987939662 7 A38 38 0 0 1 31.35997276079435 21.46047782418268 L31.35997276079435 21.46047782418268 L38.431040572659825 28.531545636048154 L28.531545636048154 38.431040572659825 L21.46047782418268 31.359972760794346 A38 38 0 0 1 7.0000000000000036 37.3496987939662 L7.0000000000000036 37.3496987939662 L7.000000000000004 47.3496987939662 L-6.999999999999999 47.3496987939662 L-7 37.3496987939662 A38 38 0 0 1 -21.46047782418268 31.35997276079435 L-21.46047782418268 31.35997276079435 L-28.531545636048154 38.431040572659825 L-38.43104057265982 28.531545636048158 L-31.359972760794346 21.460477824182682 A38 38 0 0 1 -37.3496987939662 7.000000000000007 L-37.3496987939662 7.000000000000007 L-47.3496987939662 7.000000000000008 L-47.3496987939662 -6.9999999999999964 L-37.3496987939662 -6.999999999999997 A38 38 0 0 1 -31.35997276079435 -21.460477824182675 L-31.35997276079435 -21.460477824182675 L-38.431040572659825 -28.531545636048147 L-28.53154563604818 -38.4310405726598 L-21.4604778241827 -31.35997276079433 A38 38 0 0 1 -6.999999999999992 -37.3496987939662 L-6.999999999999992 -37.3496987939662 L-6.999999999999994 -47.3496987939662 L6.999999999999977 -47.3496987939662 L6.999999999999979 -37.3496987939662 A38 38 0 0 1 21.460477824182686 -31.359972760794342 L21.460477824182686 -31.359972760794342 L28.531545636048158 -38.43104057265982 L38.4310405726598 -28.53154563604818 L31.35997276079433 -21.4604778241827 A38 38 0 0 1 37.3496987939662 -6.999999999999995 M0 -23A23 23 0 1 0 0 23 A23 23 0 1 0 0 -23" fill="#dd0459"/></g></g> <g transform="translate(19 19) scale(0.6)"> <g>
				<animateTransform attributeName="transform" type="rotate" values="360;0" keyTimes="0;1" dur="1s" begin="-0.0625s" repeatCount="indefinite"/><path d="M37.3496987939662 -7 L47.3496987939662 -7 L47.3496987939662 7 L37.3496987939662 7 A38 38 0 0 1 31.35997276079435 21.46047782418268 L31.35997276079435 21.46047782418268 L38.431040572659825 28.531545636048154 L28.531545636048154 38.431040572659825 L21.46047782418268 31.359972760794346 A38 38 0 0 1 7.0000000000000036 37.3496987939662 L7.0000000000000036 37.3496987939662 L7.000000000000004 47.3496987939662 L-6.999999999999999 47.3496987939662 L-7 37.3496987939662 A38 38 0 0 1 -21.46047782418268 31.35997276079435 L-21.46047782418268 31.35997276079435 L-28.531545636048154 38.431040572659825 L-38.43104057265982 28.531545636048158 L-31.359972760794346 21.460477824182682 A38 38 0 0 1 -37.3496987939662 7.000000000000007 L-37.3496987939662 7.000000000000007 L-47.3496987939662 7.000000000000008 L-47.3496987939662 -6.9999999999999964 L-37.3496987939662 -6.999999999999997 A38 38 0 0 1 -31.35997276079435 -21.460477824182675 L-31.35997276079435 -21.460477824182675 L-38.431040572659825 -28.531545636048147 L-28.53154563604818 -38.4310405726598 L-21.4604778241827 -31.35997276079433 A38 38 0 0 1 -6.999999999999992 -37.3496987939662 L-6.999999999999992 -37.3496987939662 L-6.999999999999994 -47.3496987939662 L6.999999999999977 -47.3496987939662 L6.999999999999979 -37.3496987939662 A38 38 0 0 1 21.460477824182686 -31.359972760794342 L21.460477824182686 -31.359972760794342 L28.531545636048158 -38.43104057265982 L38.4310405726598 -28.53154563604818 L31.35997276079433 -21.4604778241827 A38 38 0 0 1 37.3496987939662 -6.999999999999995 M0 -23A23 23 0 1 0 0 23 A23 23 0 1 0 0 -23" fill="#fd99a7"/></g></g></g></svg>
            </form>
            
            
            <form id="save">
                <label>Save animation as:</label>
                <input autocomplete="off" name="name" type="text">
                <button type="submit">Save</button>
            </form>
           
           
            <form id="load">
                <label>Load animation:</label>
                <select autocomplete="off" name="animation">
                </select>
                <button type="submit">Load</button>
            </form>
        </div>
        <script>
            const SNAPSHOTS = [
                "final",
                "000140",
                "001283",
                "002364",
                "003285",
                "004085",
                "004705",
                "005306",
                "005726",
                "006127",
                "006528",
                "006840",
                "007141",
                "007442",
                "007743",
                "008044",
                "008344",
                "008645",
                "008946",
                "009247",
                "009548",
                "009848",
                "010149",
                "010450",
                "010751",
                "011052",
                "011352",
                "011653",
                "011954",
                "012255",
                "012556",
                "012856",
                "013157",
                "013458",
                "013759",
                "014060",
                "014360",
                "014661",
                "014962",
                "015263",
                "015564",
                "015864",
                "016165",
                "016466",
                "016767",
                "017068",
                "017368",
                "017669",
                "017970",
                "018271",
                "018572",
                "018872",
                "019173",
                "019474",
                "019775",
                "020076",
                "020376",
                "020677",
                "020978",
                "021279",
                "021580",
                "021880",
                "022181",
                "022482",
                "022783",
                "023084",
                "023384",
                "023685",
                "023986",
                "024287",
                "024588",
                "024888",
                "025000"
            ];

            function getImage(direction, steps, shadows, output, loading) {
                return fetch('/generate?direction=' + direction +  '&steps=' + steps + '&shadows=' + (shadows.checked ? '1' : '0'))
                .then( response => response.json() )
                .then(data => {
                    loading.style.display = "none";
                    output.src = "data:image/jpeg;base64," + data.result;
                });
            }

            function listAnimations(animationSelect) {
                return fetch('/list')
                .then( response => response.json() )
                .then(data => {
                    data.animations.forEach((text) => {
                        const option = new Option(text, text, true, true);
                        animationSelect.append(option);
                    })
                });
            }

            window.onload = () => {

                const snapshotSelect = document.querySelector("select[name=snapshot]");
                const typeSelect = document.querySelector("select[name=type]");
                const animationSelect = document.querySelector("select[name=animation]");

                const stepsInput = document.querySelector("input[name=steps]");

                SNAPSHOTS.forEach((text) => {
                    const option = new Option(text, text, true, true);
                    snapshotSelect.append(option);
                })
                //snapshotSelect.value = "013458";
                snapshotSelect.value = "007743";

                listAnimations(animationSelect);


                const output = document.querySelector("img#output");
				        const shadows = document.querySelector("input#shadows");
                const loading = document.querySelector("#loading");

                document.querySelectorAll("button.generate").forEach(button =>
                button.addEventListener("click", (e) => {
					            getImage(
                        e.currentTarget.dataset.direction,
                        e.currentTarget.dataset.steps,
                        shadows,
                        output,
                        loading
                    );
                }));

                document.querySelector("form#shuffle")
                .addEventListener("submit", (e) => {
                    e.preventDefault();
                    loading.style.display = "inline-block";
                    const form = e.target;
                    const data = {
                        steps: form.steps.value,
                        snapshot: form.snapshot.value,
                        type: form.type.value
                    }
                    fetch('/shuffle', {
                        method: 'POST', 
                        headers: {'Content-Type': 'application/json'},
                        body: JSON.stringify(data)
                    })
                    .then(res => res.json())
                    .then((data) => {
                        if (data.result == "OK") {
                            return getImage("forward", "1", shadows, output, loading);
                        } else {
                            alert(data.result);
                        }
                    })
                });

                document.querySelector("form#save")
                .addEventListener("submit", (e) => {
                    e.preventDefault();
                    const form = e.target;
                    const data = {
                        name: form.name.value
                    }
                    fetch('/save', {
                        method: 'POST', 
                        headers: {'Content-Type': 'application/json'},
                        body: JSON.stringify(data)
                    })
                    .then(res => res.json())
                    .then((data) => {
                        console.log("Result", data);
                        if (data.result != "OK") {
                            alert(data.result);
                        } else {
                            alert("Saved!");
                        }
                    })
                });
                document.querySelector("form#load")
                .addEventListener("submit", (e) => {
                    e.preventDefault();
                    const form = e.target;
                    loading.style.display = "inline-block";
                    const params = {
                        animation: form.animation.value
                    }
                    fetch('/load', {
                        method: 'POST', 
                        headers: {'Content-Type': 'application/json'},
                        body: JSON.stringify(params)
                    })
                    .then(res => res.json())
                    .then((data) => {
                        if (data.result.status == "new_snapshot"){
                            snapshotSelect.value = data.result.snapshot;
                            return fetch('/load', {
                                method: 'POST', 
                                headers: {"Content-Type": "application/json"},
                                body: JSON.stringify(params)
                            })
                            .then(res => res.json())
                        } else {
                            return data
                        }
                    })
                    .then((data) => {
                        if (data.result.status == "OK") {
                            console.log("Loading done", data);
                            stepsInput.value = parseInt(data.result.steps);
                            return getImage("forward", "1", shadows, output, loading)
                        } else {
                            alert(data.result.status);
                        }
                    });
                })
                document.querySelector("button#download-video")
                .addEventListener("click", (e) => {
                    window.open("/video?shadows=" + (shadows.checked ? '1' : '0') + "&dt="+(new Date()).getTime(), "_blank");
                });
            }
        </script>
    </body>
</html>
